// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/unbeman/ya-prac-mcas/internal/storage (interfaces: Repository)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metrics "github.com/unbeman/ya-prac-mcas/internal/metrics"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddCounter mocks base method.
func (m *MockRepository) AddCounter(arg0 context.Context, arg1 string, arg2 int64) (metrics.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounter", arg0, arg1, arg2)
	ret0, _ := ret[0].(metrics.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCounter indicates an expected call of AddCounter.
func (mr *MockRepositoryMockRecorder) AddCounter(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounter", reflect.TypeOf((*MockRepository)(nil).AddCounter), arg0, arg1, arg2)
}

// AddCounters mocks base method.
func (m *MockRepository) AddCounters(arg0 context.Context, arg1 []metrics.Counter) ([]metrics.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCounters", arg0, arg1)
	ret0, _ := ret[0].([]metrics.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCounters indicates an expected call of AddCounters.
func (mr *MockRepositoryMockRecorder) AddCounters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCounters", reflect.TypeOf((*MockRepository)(nil).AddCounters), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockRepository) GetAll(arg0 context.Context) ([]metrics.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]metrics.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRepository)(nil).GetAll), arg0)
}

// GetCounter mocks base method.
func (m *MockRepository) GetCounter(arg0 context.Context, arg1 string) (metrics.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounter", arg0, arg1)
	ret0, _ := ret[0].(metrics.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounter indicates an expected call of GetCounter.
func (mr *MockRepositoryMockRecorder) GetCounter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounter", reflect.TypeOf((*MockRepository)(nil).GetCounter), arg0, arg1)
}

// GetGauge mocks base method.
func (m *MockRepository) GetGauge(arg0 context.Context, arg1 string) (metrics.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGauge", arg0, arg1)
	ret0, _ := ret[0].(metrics.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGauge indicates an expected call of GetGauge.
func (mr *MockRepositoryMockRecorder) GetGauge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGauge", reflect.TypeOf((*MockRepository)(nil).GetGauge), arg0, arg1)
}

// Ping mocks base method.
func (m *MockRepository) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), arg0)
}

// SetGauge mocks base method.
func (m *MockRepository) SetGauge(arg0 context.Context, arg1 string, arg2 float64) (metrics.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", arg0, arg1, arg2)
	ret0, _ := ret[0].(metrics.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockRepositoryMockRecorder) SetGauge(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockRepository)(nil).SetGauge), arg0, arg1, arg2)
}

// SetGauges mocks base method.
func (m *MockRepository) SetGauges(arg0 context.Context, arg1 []metrics.Gauge) ([]metrics.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauges", arg0, arg1)
	ret0, _ := ret[0].([]metrics.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGauges indicates an expected call of SetGauges.
func (mr *MockRepositoryMockRecorder) SetGauges(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauges", reflect.TypeOf((*MockRepository)(nil).SetGauges), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockRepository) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRepositoryMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRepository)(nil).Shutdown))
}
